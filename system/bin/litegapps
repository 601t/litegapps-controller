#!/system/bin/sh
#LiteGapps Controller
#by wahyu6070 @xda-developers
#since 08-07-2019
#License GPL3+
#if you copy some code here please permission to the owner
#

propversion=v0.7
propdate=14-11-2021

# Colors
GREEN='\e[01;32m'
RED='\e[01;31m'
BRED='\033[0;41m'
YELLOW='\e[01;33m'
BLUE='\e[01;34m'
VIOLET='\e[01;35m'
BLACK='\e[01;30m'
CYAN='\e[01;36m'
WHITE='\e[01;37m'
BGBL='\e[1;30;47m'
NC='\033[0m'
N='\e[0m'


BASED=/sdcard/Android/litegapps
LOG=$BASED/liteggapps_controller.log
DATA=$BASED/data

#▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
#Functions
#▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
print() { echo "$1"; }
getp(){ echo $1 "$2" | head -n1 | cut -d = -f 2; }
getp1(){ echo $1 | head -n1 | cut -d : -f 2; }
del(){ rm -rf "$@" ; }
cdir(){ mkdir -p "$@" ; }
error() {
	print
	print "${RED}ERROR :  ${WHITE}$1${GREEN}"
	print
	}
printmid() {
  local CHAR=$(printf "$@" | sed 's|\\e[[0-9;]*m||g' | wc -m)
  local hfCOLUMN=$((COLUMNS/2))
  local hfCHAR=$((CHAR/2))
  local indent=$((hfCOLUMN-hfCHAR))
  echo "$(printf '%*s' "${indent}" '') $@"
}
loadings() {
  PID=$!
  a=0;
  while [ -d /proc/$PID ]; do
    b=$((+1))
    a=$((a+1))
    sleep 0.9s
    printf "\r${@} [${a}Second]"
  done
}
print_title(){
	clear
	printmid "${YELLOW}$1${GREEN}"
	print " "
	}

spinner() {
  set +x
  PID=$!
  h=0; anim='-\|/';
  while [ -d /proc/$PID ]; do
    h=$(((h+1)%4))
    sleep 0.02
    printf "\r${@} [${anim:$h:1}]"
  done
  set -x 2>>$VERLOG
}
end_menu(){
	print " "
	print "${YELLOW}1. Back"
	print " "
	echo -n "${VIOLET} Select Menu : ${CYAN}"
	read lol
	}
#▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
# LIST APPS
#▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
system_list="
org.lineageos.snap
com.android.vending
com.google.android.calculator
com.google.android.calendar
"

blacklist_term="
com.termux
com.termoneplus
"
blacklist_system="
com.google.android.inputmethod.latin
com.google.android.gms
"
blacklist_apps="
com.mixplorer
com.google.android.apps.messaging
com.google.android.play.games
ch.deletescape.lawnchair.plah
"
LIST_GAME="
com.mobile.legends
com.tencent.ig
com.supercell.clashofclans
com.neptune.domino
com.garena.game.codm
com.chess
"

black_func(){
	BLACK_LIST_GAMING_2=$DATA/black_list_gaming2
	if [ -f $DATA/black_list_gaming2 ]; then
		blacklist_game="$(cat $BLACK_LIST_GAMING_2)"
	else
		for WAHYU2345 in $LIST_GAME; do
			echo "$WAHYU2345" >> $BLACK_LIST_GAMING_2
		done
		blacklist_game="$(cat $BLACK_LIST_GAMING_2)"
	fi
	for zzz in $blacklist_apps $blacklist_game $blacklist_system $blacklist_term; do
		[[ "$1" == $zzz ]] && return 0
	done
	}
#▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
#▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
#Litegapps
#▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
#▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

#mount
clear
print "- Mounting Root"
if mount -o rw,remount / ; then
echo
else
abort "- Abort mounting root"
sleep 3s
fi

getp5(){ grep "^$1" "$2" | head -n1 | cut -d = -f 2; }
test -f /system_root/system/build.prop && SYSDIR=/system_root/system || test -f /system/system/build.prop && SYSDIR=/system/system || SYSDIR=/system
findarch=$(getp5 ro.product.cpu.abi $SYSDIR/build.prop | cut -d '-' -f -1)
SDK=$(getp5 ro.build.version.sdk $SYSDIR/build.prop)
case $findarch in
arm64) ARCH=arm64 ;;
armeabi) ARCH=arm ;;
x86) ARCH=x86 ;;
x86_64) ARCH=x86_64 ;;
*) abort " <$findarch> Your Architecture Not Support" ;;
esac

#▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
#▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

boost(){
print "- Boost...";
print " ";
for z in $(pm list packages -3) $system_list; do
boost6071=`getp1 $z`
   case $boost6071 in
     com.termux | com.termoneplus )
        print "${YELLOW}[SKIP] •> ${WHITE}${boost6071//com.}"
        ;;
        
     *)   
        am force-stop $boost6071 && print "${GREEN}[OK] •> ${WHITE}${boost6071//com.}" || print "${RED}[ERROR] •> ${WHITE}${boost6071//com.}" 2>/dev/null
     ;;
    esac  
done
print "- Done ";
}

device(){
	print
    ROM=$(getprop ro.build.display.id | cut -d'-' -f1)
	print "Name ROM = $ROM ($(getprop ro.product.vendor.device)) "
	print "Android Version = $(getprop ro.build.version.release)" |  tee -a $LOG;
	print "Android Security patch = $(getprop ro.build.version.security_patch)"
	print "battery Status = $(cat /sys/class/power_supply/battery/status)"
	print "battery = $(cat /sys/class/power_supply/battery/capacity)%"
	print "battery Technology = $(cat /sys/class/power_supply/battery/technology)"
	print "battery Health = $(cat /sys/class/power_supply/battery/health)"
	ARM=$(getprop ro.product.cpu.abi)
	print "Architecture = $ARM" |  tee -a $LOG;
	selinux=$(getenforce)
	print "Selinux = $selinux " |  tee -a $LOG;
	print "Kernel = $(uname -r)" |  tee -a $LOG;
	print "Chipset = $(getprop ro.product.board) " |  tee -a $LOG;
	print "GPU = $(cat /sys/kernel/gpu/gpu_model)"
	for i in /system/xbin/busybox /sbin/busybox /system/bin/busybox /vendor/bin
	do
	[ -f $i ] && print "Busybox = Installed" || print "${WHITE}Busybox = Not found $GREEN"
	 break 
    done
    if command -v magisk >/dev/null; then
    	print "Magisk = Installed"
    	print "Magisk version = $(magisk -v)"
    	print "Magisk Version code = $(magisk -V)"
    	print "Magisk path =$(magisk --path)"
    else
    	print "magisk = Not found"
    fi
    [ "$(getprop persist.vendor.camera.HAL3.enabled)" -eq 1 ] && print "Camera2api = Enable" || print "${WHITE}Camera2api = Disable $GREEN"
    [ "$(grep f2fs /vendor/etc/fstab.qcom)" ] && print "F2FS = This ROM supports F2FS" || print "${WHITE}F2FS = This ROM not supports F2FS${GREEN}"
    test -f /sys/kernel/touchpanel/dclicknode && [ "$(cat /sys/kernel/touchpanel/dclicknode)" -eq 1 ] && print "DT2W = Enable" || print "${WHITE}DT2W = Disable${GREEN}"
    [ -d /dev/block/mapper ] && print "Dynamic Partitions = true" || "Dynamic Partitions = false"
    }
	
gaming1(){
	while true; do
	clear
	printmid "${BRED}Gaming Mode 1${NC}$WHITE"
	print " ";
		for z in $(pm list packages -3) $gappslist $syslist; do
			boost6071=`getp1 $z`
  			 if black_func $boost6071; then
			 	  print "${YELLOW}[SKIP] •> ${WHITE}${boost6071//com.}"
			   else	  
			 	  am force-stop $boost6071 2>/dev/null | >/dev/null && print "${GREEN}[OK] •> ${WHITE}${boost6071//com.}" || print "${RED}[ERROR] •> ${WHITE}${boost6071//com.}"
			   fi
 		 done
 	print "- ${GREEN}Done${WHITE}"
     sleep 60s & loadings "- Loading ..."
 	done		
}


gaming2(){
	if [ ! -f $DATA/gaming_mode_2 ]; then
	clear
	print
	printmid "${CYAN}Gaming Mode 2${NC}$WHITE"
	print " ";
	del $DATA/gaming2_list_apps
		for z in $(pm list packages -3) $system_list; do
			boost6071=`getp1 $z`
			 if black_func $boost6071; then
			 	  print "${YELLOW}[SKIP] •> ${WHITE}${boost6071//com.}"
			 else	  
			 	  pm disable $boost6071 2>/dev/null | >/dev/null && print "${GREEN}[OK] •> ${WHITE}${boost6071//com.}" || print "${GREEN}[ERROR] •> ${WHITE}${boost6071//com.}"
			 	  echo "$boost6071" >> $DATA/gaming2_list_apps
			 fi
 	   done
 	echo actived > $DATA/gaming_mode_2
 	print "- ${GREEN}Done${WHITE}"
 	sleep 6s
	elif [ -f $DATA/gaming_mode_2 ]; then
	clear
	printmid "${BRED}DisablingGaming Mode 2${NC}$WHITE"
		 while IFS=' ' read -r gaming2_apps; do
		 	pm enable $gaming2_apps 2>/dev/null | >/dev/null  && print "${GREEN}[OK] •> ${WHITE}${gaming2_apps//com.}" || print "${RED}[ERROR] •> ${WHITE}${gaming2_apps//com.}"
		 done < $DATA/gaming2_list_apps
	del $DATA/gaming2_list_apps
	del $DATA/gaming_mode_2
	print "- Done"
	sleep 6s
	fi
	}
gaming3(){
	status_gaming3=$DATA/gaming_mode_3
	list_gaming3=$DATA/gaming_mode_3_list
	if [ ! -f $list_gaming3 ]; then
		ADD_LIST_GAMING3="
		com.android.vending
		com.google.android.calendar
		com.google.android.calculator
		"
		for WAHYU666 in $ADD_LIST_GAMING3; do
			echo "$WAHYU666" >> $list_gaming3
		done
	fi
	[ ! -f $list_gaming3 ] && [ ! $(grep . $list_gaming3) ] && error "$list_gaming3 Not found list app" && sleep 7s && return 1;
	if [ -f $status_gaming3 ]; then
		clear
		printmid "${BRED}Disabling Gaming Mode 3 ${NC}$GREEN"
		print
		sleep 1s
		while IFS=' ' read -r gaming3_list; do
			pm enable $gaming3_list 2>/dev/null | >/dev/null && print "${GREEN}[OK] •> ${WHITE}${gaming3_list//com.}" || print "${RED}[ERROR] •> ${WHITE}${gaming3_list//com.}"
		done < $list_gaming3
		
		del $DATA/gaming_mode_3
		print "${GREEN}- Done"
		sleep 5s
	else
	clear
		printmid "${BRED}Enabling Gaming Mode 3${NC}${GREEN}"
		print
		sleep 1s
		while IFS=' ' read -r gaming3_list; do
			pm disable $gaming3_list 2>/dev/null | >/dev/null && print "${GREEN}[OK] •> ${WHITE}${gaming3_list//com.}" || print "${GREEN}[ERROR] •> ${WHITE}${gaming3_list//com.}"
		done < $list_gaming3
		echo actived > $status_gaming3
		print "${GREEN}- Done"
		sleep 5s
	fi
	
	}
	
gaming(){
	while true; do
	if [ ! -f $DATA/black_list_gaming2 ]; then
		for WAHYU2345 in $LIST_GAME; do
			echo "$WAHYU2345" >> $DATA/black_list_gaming2
		done
	fi
	
	clear
	[ -f $DATA/gaming_mode_2 ] && gaming22="${VIOLET}2.Disable Gaming Mode 2${GREEN}" || gaming22="2.Gaming Mode 2 (Not Recomended)"
	[ -f $DATA/gaming_mode_3 ] && gaming23="${VIOLET}3.Disable Gaming Mode 3${GREEN}" || gaming23="3.Gaming Mode 3"
	printmid "${YELLOW}Gaming Mode Select $GREEN"
	print
	print "1.Gaming Mode 1"
	print "$gaming22"
	print "$gaming23"
	print "4.Make List Apps"
	print "5.About"
	print "6.Exit"
	print
	echo -n "Select Gaming Mode : "
	read gamemodeselect
	print
	case $gamemodeselect in
	1) gaming1 ;;
	2) gaming2 ;;
	3) gaming3 ;;
	4)
	print_title "Select list all"
	print "1.List apps installed"
	print "2.List system"
	print "3.List system and apps"
	print "4.Exit"
	print
	echo -n "Select Menu : "
	read appps
	case $appps in
		1)
		print_title "Creating list apps installed"
		del $BASED/list_apps_installed
		for capps in $(pm list packages -3); do
		print "••> $(getp1 $capps)"
		print "$(getp1 $capps)" >> $BASED/list_apps_installed
		done
		print
		print "${WHITE}- Check in •> $BASED/list_apps_installed $GREEN"
		print "- done"
		print
		print "1.Back"
		print " "
		echo -n "  Select Menu : "
		read WAHYU89
		;;
		2)
		print_title "Creating list system"
		del $BASED/list_system
		for capps in $(pm list packages -s); do
		print "••> $(getp1 $capps)"
		print "$(getp1 $capps)" >> $BASED/list_system
		done
		print
		print "${WHITE}- Check in •> $BASED/$base/list_system $GREEN"
		print "- done"
		print
		print
		print "1.Back"
		print " "
		echo -n "  Select Menu : "
		read WAHYU88
		;;
		3)
		print_title "Creating list system and apps"
		del $BASED/list_system_apps
		for capps in $(pm list packages); do
		print "••> $(getp1 $capps)"
		print "$(getp1 $capps)" >> $BASED/list_system_apps
		done
		print
		print "${WHITE}- Check in •> $BASED/$base/list_system_apps $GREEN"
		print "- done"
		print
		print
		print "1.Back"
		print " "
		echo -n "  Select Menu : "
		read WAHYU88
		;;
	esac
	;;
	5)
	clear
	printmid "${CYAN}Gaming Mode About${GREEN}"
	print
	print "${YELLOW}1.Gaming Mode 1 $GREEN"
	print "   • Every 60 seconds application installed on your device will be forced to stop.to add a blacklist app, add it here : ${WHITE}<$DATA/black_list_gaming2>${GREEN}"
	print "${YELLOW}#.Blacklist Gaming Mode 1"
	for WAHYU6767 in $blacklist_apps $blacklist_system $blacklist_term $(cat $DATA/black_list_gaming2); do
		print "${CYAN}  • $WAHYU6767"
	done
	print "${YELLOW}#.List Apps Gaming Mode 1"
	for z in $(pm list packages -3) $gappslist $syslist; do
			boost6071=`getp1 $z`
  			 if black_func $boost6071; then
			 	  shift 0
			   else	  
			 	  print "${CYAN}  • $boost6071"
			   fi
    done
	print
	print "${YELLOW}2.Gaming Mode 2 $GREEN"
	print "   •  Applications installed on your device will be disabled. To add a blacklist app, add it here : ${WHITE}<$DATA/black_list_gaming2>${GREEN}"
	print "${YELLOW}#.Blacklist Gaming Mode 2"
	for WAHYU6767 in $blacklist_apps $blacklist_system $blacklist_term $(cat $DATA/black_list_gaming2); do
		print "${CYAN}  • $WAHYU6767"
	done
	print "${YELLOW}#.List Apps Gaming Mode 2"
	for z in $(pm list packages -3) $gappslist $syslist; do
			boost6071=`getp1 $z`
  			 if black_func $boost6071; then
			 	  shift 0
			   else	  
			 	  print "${CYAN}  • $boost6071"
			   fi
    done
    print
    print "${YELLOW}3.Gaming Mode 3 $GREEN"
	print "   • Listed Applications list ${WHITE}<$DATA/gaming_mode_3_list>${GREEN} will be deactivated."
	print "${YELLOW}#.List Gaming Mode 3"
    if [ -f $DATA/gaming_mode_3_list ]; then
    	for WAHYU90 in $(cat $DATA/gaming_mode_3_list); do
    		print "$CYAN  • $WAHYU90"
    	done
    else
    	print "$WHITE  • NULL"
    fi
	print
	print "$GREEN 1.Back $YELLOW"
	print
	echo -n " Select Menu : "
	read asw
	;;
	6) break ;;
	*) error "Invalid selection"; sleep 2s ;;
	esac
	done
	}
battery(){
	if [ ! -f $DATA/battery_saver ]; then
	print "${CYAN}Enabling Battery Saving${NC}$WHITE"
		for z in $(pm list packages -3) $gappslist $syslist; do
		boost6071=`getp1 $z`
   		if black_func $boost6071; then
   		   print "${CYAN}[SKIP] •> ${WHITE}${boost6071//com.}"
   		else   
   		   print "${GREEN}[OK] •> ${WHITE}${boost6071//com.}"
   		   am force-stop $boost6071 2>/dev/null
   		fi   
		done
		pm disable com.google.android.gms/com.google.android.gms.mdm.receivers.MdmDeviceAdminReceiver >/dev/null
		print "actived" > $DATA/battery_saver
		print "- Done ";
	elif [ -f $DATA/battery_saver ]; then
		print "${CYAN}Disabling Battery Saving${NC}$WHITE"
		pm enable com.google.android.gms/com.google.android.gms.mdm.receivers.MdmDeviceAdminReceiver >/dev/null
		del $DATA/battery_saver
		print "- Done"
	fi
}
addon_led_calerful(){
		print_title "LED Calorfull"
		print "1 Very Fast"
		print "2 Fast"
		print "3 medium"
		print "4 slow"
		print "5 Very slow"
		print
		echo -n "Selete LED scale : "
		read scale
		case $scale in
			1) ledscale=" " ;;
			2) ledscale="sleep 1s" ;;
			3) ledscale="sleep 2s" ;;
			4) ledscale="sleep 4s" ;;
			5) ledscale="sleep 5s" ;;
		  *)
			print
			print "select not found, set medium scale"
			ledscale="sleep 2s"
			sleep 2s
			;; 
			
		esac
		while true; do
			print 0 > /sys/class/leds/red/brightness
			cat /sys/class/leds/red/max_brightness > /sys/class/leds/red/brightness
			$ledscale
			print 0 > /sys/class/leds/red/brightness
			cat /sys/class/leds/green/max_brightness > /sys/class/leds/green/brightness
			$ledscale
			echo 0 > /sys/class/leds/green/brightness
		done
	}
addon_boot_unpacker(){
	if [ -f $BASED/boot.img ]; then
			block=$BASED/boot.img
		elif [ ! -z $(find /dev/block -type l -iname boot | head -n 1) ]; then
			block=$(find /dev/block -type l -iname boot | head -n 1)
		elif [ ! -z /dev/block/by-name/boot ]; then
			block=/dev/block/by-name/boot
		else
			print
			echo -n "- Set Manual Boot image : "
			read setboot
			block=$setboot
		fi
		
		if [ $(command -v magiskboot) ]; then
			local MAGISKBOOT=magiskboot
		elif [ -f /data/adb/magisk/magiskboot ]; then
			local MAGISKBOOT=/data/adb/magisk/magiskboot
		fi
		if [ "$MAGISKBOOT" ] && [ ! -z $block ]; then
			print_title "Boot image Unpacker"
			print "- Block  : $block"
			print "- Output : $BASED/boot/<here>"
			print " "
			sleep 2s
			del $BASED/boot
			cdir $BASED/boot
			cd $BASED/boot
			print "- Unpack boot image"
			sleep 1s
			cat $block > $BASED/boot/old-boot.img
			$MAGISKBOOT unpack -h $block 2>/dev/null
			print "- Repack boot image"
			$MAGISKBOOT repack $block 2>/dev/null
			cd /
			sleep 1s
			print "- Unpackimg Done"
			end_menu
		else
			print_title "Boot image Unpacker"
			print "${RED}! Magiskboot or Boot.img Not found"
			end_menu
		fi
	}
addon_enable_all_apps(){
	print_title "Enable All Apps"
	for WAHYU67 in $(pm list packages); do
		local APP_INPUT=`getp1 $WAHYU67`
		for WAHYU77 in $blacklist_term; do
			if [ $APP_INPUT != $WAHYU77 ]; then
				pm enable $(getp1 $WAHYU67) 2>/dev/null | >/dev/null
				if [ $? -eq 0 ]; then
					print "${GREEN}[OK] •> $APP_INPUT"
				else
					print "${RED}[ERROR] •> $APP_INPUT"
				fi
			else
				print "${YELLOW}[SKIP] <$APP_INPUT>"
			fi
		done
	done
	end_menu
	}
addon_ccg(){
	print_title " Clean Cache Game"
	for W2 in $LIST_GAME; do
		if [ -d /data/data/$W2/cache ]; then
			print "${YELLOW}[CLEAN]${GREEN} •> $W2 cache"
			del /data/data/$W2/cache
			del /sdcard/Android/data/$W2/cache
		fi
	done
	end_menu
	}
addon(){
	while true; do
	print_title "Add-on"
	print "1. Fake Battery Set"
	print "2. Led Calerful"
	print "3. Disable Led"
	print "4. Set brightness"
	print "5. Boot Unpacker"
	print "6. Set all permissions apk installed"
	print "7. Enable All Apps"
	print "8. Clean Cache Game"
	print "9. Exit"
	print " "
	echo -n "Select Menu : "
	read addons
	case $addons in
	1)
		print
		echo -n "Fake Batttery Number : "
		read fake
		echo $fake > /sys/class/power_supply/battery/capacity 
	;;
	2)addon_led_calerful
	;;
	3)
		print
		print "- Disabling Leds"
		echo 0 > /sys/class/leds/red/brightness
		echo 0 > /sys/class/leds/green/brightness
		print "- Done"
		sleep 2s
	;;
	4)
		bigmax=$(cat /sys/class/leds/wled/max_brightness)
		print
		echo -n "- Set brightness 0 - $bigmax : "
		read bigset
		if [ $bigset -eq $bigset ]; then
			echo "$bigset" > /sys/class/leds/wled/brightness
			print "- Set $brightness"
			sleep 2s
		else
			print
			print "- $bigset Is Not number"
			sleep 2s
		fi
	;;
	5) addon_boot_unpacker
	;;
	6)
		print_title "Set All Permissions APK Installed"
		for b in $(pm list packages -3); do
			package=`getp1 $b`
			print "${GREEN}- Set permissions : ${CYAN}$package"
			pm grant $package android.permission.READ_CALENDAR 2>/dev/null
			pm grant $package android.permission.READ_CALL_LOG  2>/dev/null
			pm grant $package android.permission.ACCESS_FINE_LOCATION 2>/dev/null
			pm grant $package android.permission.READ_EXTERNAL_STORAGE 2>/dev/null
			pm grant $package android.permission.ACCESS_COARSE_LOCATION 2>/dev/null
			pm grant $package android.permission.READ_PHONE_STATE 2>/dev/null
			pm grant $package android.permission.SEND_SMS 2>/dev/null
			pm grant $package android.permission.CALL_PHONE 2>/dev/null
			pm grant $package android.permission.WRITE_CONTACTS 2>/dev/null
			pm grant $package android.permission.CAMERA 2>/dev/null
			pm grant $package android.permission.WRITE_CALL_LOG 2>/dev/null
			pm grant $package android.permission.PROCESS_OUTGOING_CALLS 2>/dev/null
			pm grant $package android.permission.GET_ACCOUNTS 2>/dev/null
			pm grant $package android.permission.WRITE_EXTERNAL_STORAGE 2>/dev/null
			pm grant $package android.permission.RECORD_AUDIO 2>/dev/null
			pm grant $package android.permission.ACCESS_MEDIA_LOCATION 2>/dev/null
			pm grant $package android.permission.READ_CONTACTS 2>/dev/null
		done
		end_menu
	;;
	7) addon_enable_all_apps
	;;
	8)
	addon_ccg
	;;
	9) break ;;
	*)
		error "Invalid selection"; sleep 2s ;;
	esac
	done
	}

testping(){
	print_title "Test Ping Signal"
	local SERVER=google.com
	print " Server : $SERVER"
	print " "
	for ping_loop in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ; do
		coreping=`ping -w 3s $SERVER | tail -5 | grep time= | cut -d' ' -f8 | cut -d = -f2 | cut -d . -f1`
			if [ ! "$coreping" ] && [ "$coreping" = *"unknown host"* ]; then
				print "${RED} PING ${WHITE}•> ${RED}Server unknown host"
				break
			elif [ ! "$coreping" ]; then
				print "${RED} PING ${WHITE}•> ${RED}Server not respon"
				break
			elif [ "$coreping" -lt 30 ]; then
				print "${GREEN} PING ${WHITE}•>${GREEN} $coreping STATUS •> Very Good"
			elif [ "$coreping" -lt 70 ]; then
				print "${GREEN} PING ${WHITE}•>${GREEN} $coreping STATUS •> Good"
			elif [ "$coreping" -lt 100 ]; then
				print "${YELLOW} PING ${WHITE}•>${YELLOW} $coreping STATUS •> Medium"
			elif [ "$coreping" -lt 120 ]; then
				print "${VIOLET} PING ${WHITE}•>${VIOLET} $coreping STATUS •> Unstable"
			else
			 print "${RED} PING •> $coreping STATUS •> very unstable"
			fi 
	done
	}
	
meminfo(){
	print "RAM Free = $(free -h | grep Mem | tr -s ' ' | cut -d' ' -f4)"
	print "RAM Used = $(free -h | grep Mem | tr -s ' ' | cut -d' ' -f3)"
	print "RAM Total = $(free -h | grep Mem | tr -s ' ' | cut -d' ' -f2)"
	print
	for W897 in /data /system /product /system_ext /vendor /cache /dev /; do
		if [ -d $W897 ]; then
		print "$W897 Free  = $(df -h $W897 | tail -n 1 | tr -s ' ' | cut -d' ' -f4)"
		print "$W897 Used  = $(df -h $W897 | tail -n 1 | tr -s ' ' | cut -d' ' -f3)"
		print "$W897 Total = $(df -h $W897 | tail -n 1 | tr -s ' ' | cut -d' ' -f2)"
		print
		fi
	done
	}
about(){
print "$CYAN "
print "Litegapps Controller $propversion ($propdate)"
print "Copyright (C) 2019 wahyu kurniawan (wahyu6070)."
print "License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>."
print "This is free software: you are free to change and redistribute it."
print "There is NO WARRANTY, to the extent permitted by law."
print "${YELLOW}"
print " Github   : https://github.com/litegapps/litegapps-controller"
print " Telegram : https://t.me/litegapps"
print " Youtube  : https://youtube.com/c/wahyu6070"
print " $GREEN"
}

menu(){
	while true; do
	print_title "$2"
	$1
	print
	print "${CYAN}1.Back To Menu      ${GREEN}2.Refresh"
	print
	echo -n "${WHITE}Select menu : ${NC}$GREEN"
	read anjay
	if [ $anjay -eq 1 ]; then
	break
	elif [ $anjay -eq 2 ]; then print;
	else
	print
	error "Please select 1 or 2"
	print
	sleep 2s
	fi
	done
}

#
#Root
id=`id`; id=`echo ${id#*=}`; id=`echo ${id%%\(*}`; id=`echo ${id%% *}`
if [ "$id" != "0" ] && [ "$id" != "root" ]; then
print " "
error "Root Accest Not Found $WHITE"
print " "
exit 1
fi

#▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
for WAHYU45 in $BASED $DATA; do
	test ! -d $WAHYU45 && cdir $WAHYU45
done
#▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
while true; do
clear
test -f $DATA/battery_saver && batterystatus="${VIOLET}3.Disable Battery... ${NC}${GREEN}" || batterystatus="3.Battery Saver      "
print " "
print "                   ${CYAN}Lite${BLUE}G${RED}a${YELLOW}p${BLUE}p${GREEN}s ${YELLOW}Controller${GREEN}"
print " "
print " "
print "1.Boost              ${YELLOW}5.Litegapps Menu${GREEN}      9.Tweaks"
print "2.Gaming Mode        6.Memory Info         10.Settings"
print "${batterystatus}7.Device Info         11.About"
print "4.Check Ping         8.Add-on              12.Exit"
print
echo -n "${YELLOW}Choose one of the numbers : ${CYAN}"
read pilih
case $pilih in
1) menu boost Boost ;;
2) gaming ;;
3) menu battery "Battery Saver" ;;
4) menu testping "Test Ping" ;;
5)
	if [ -f /data/adb/litegapps_controller/litegapps_menu.sh ]; then
		. /data/adb/litegapps_controller/litegapps_menu.sh
	else
		error "Please Install Litegapps Controller full version !"
		sleep 5s
	fi
;;
6) menu meminfo "Memory Info" ;;
7) menu device "Device info" ;;
8) addon ;;
9) tweaks ;;
10) SETTINGS ;;
11 | about) menu about About ;;
12 | exit | e)  
print " $WHITE "
break 
;;
*) error "Invalid selection" ; sleep 2s ;;
esac
done
